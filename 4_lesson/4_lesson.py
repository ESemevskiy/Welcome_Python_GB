from functools import reduce
from itertools import count, cycle
"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка,
 значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

"""

m = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

def func(m):
    return [m[i] for i in range(1, len(m)) if m[i] > m[i-1]]

#print(func(m))


"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

def range20():
    return [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]

#print(range20())


"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в 
порядке их следования в исходном списке. Для выполнения задания обязательно использовать
 генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""
k = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

def count_func(m):
    return [i for i in m if m.count(i) == 1]

#print(count_func(k))

"""
5. Реализовать формирование списка, используя функцию range() и 
возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
"""

def list_func():
    return [i for i in range(100, 1001) if i % 2 == 0]

#print(reduce(lambda x, y: x * y, list_func()) if list_func() else 0)

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
"""

def cou(n):
    o = 0
   
    for i in count(n):
        if o == 10:
            break
        yield i
        o += 1

#print(list(cou(3)))

"""
итератор, повторяющий элементы некоторого списка, определенного заранее.
"""

def cyc(n):
    o = 0
    for w in cycle(n):
        if o == 10:
            break
        print(w)
        o += 1

#print(cyc([1, 2, "F"]))


"""
7. Реализовать генератор с помощью функции с ключевым словом yield, 
создающим очередное значение. При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить 
только первые n чисел, начиная с 1! и до n!.
"""
def factorial(n):
   if n == 0:
       return 1
   else:
       return n * factorial(n-1)
   
def fact(n):
    for i in range(1, n+1):
        yield i

def main(n):
    l = 0
    for x in fact(n):
        if l == 0:
            print(factorial(x))
        elif l == len(list(fact(n))) - 1:
            print(factorial(x))
        l += 1

main(10)